name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "master"   # Deploy to production from master branch
      - "staging"  # Deploy to staging from staging branch
      - "development"  # Deploy to a development environment from development branch

env:
  AWS_REGION: ap-south-1                       # Set this to your preferred AWS region (e.g. us-west-1)
  ECR_REPOSITORY:  # Set this to your Amazon ECR repository name
  ECS_SERVICE: blog-service                    # Set this to your Amazon ECS service name
  ECS_CLUSTER: blog-cluster                    # Set this to your ECS cluster name
  ECS_TASK_DEFINITION: ecs-task-definition.json # Path to your ECS task definition file
  CONTAINER_NAME: blog-container               # Set this to the name of the container in your task definition

permissions:
  contents: read  # Read access to repository contents

jobs:
  deploy:
    name: Push to ECR and Deploy to ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a Docker image and push it to ECR so that it can be deployed to ECS.
        docker build -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "image=${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    # Optionally, notify deployment status (e.g., using Slack, email, etc.)
    # - name: Notify Deployment Status
    #   uses: some-action/notify-status@v1
